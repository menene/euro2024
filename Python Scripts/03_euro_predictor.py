# -*- coding: utf-8 -*-
"""03 Euro Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AryxkXhdANpmaHHKV85j7bvXxGE1mt7A
"""

import pandas as pd
import matplotlib.pyplot as plt

def determine_result(row):
    if row["HomeTeamGoals"] > row["AwayTeamGoals"]:
        return "Home Win"
    elif row["HomeTeamGoals"] < row["AwayTeamGoals"]:
        return "Away Win"
    else:
        return "Draw"

def calculate_performance(data, teams):
    data["result"] = data.apply(determine_result, axis=1)

    filtered_data = data[
        (data["HomeTeamName"].isin(teams)) & (data["AwayTeamName"].isin(teams))
    ]

    home_team_performance = (
        filtered_data.groupby("HomeTeamName")
        .agg(
            home_matches_played=("HomeTeamName", "size"),
            home_goals_scored=("HomeTeamGoals", "sum"),
            home_goals_conceded=("AwayTeamGoals", "sum"),
            home_wins=("result", lambda x: (x == "Home Win").sum()),
            home_draws=("result", lambda x: (x == "Draw").sum()),
            home_losses=("result", lambda x: (x == "Away Win").sum()),
        )
        .reset_index()
    )

    away_team_performance = (
        filtered_data.groupby("AwayTeamName")
        .agg(
            away_matches_played=("AwayTeamName", "size"),
            away_goals_scored=("AwayTeamGoals", "sum"),
            away_goals_conceded=("HomeTeamGoals", "sum"),
            away_wins=("result", lambda x: (x == "Away Win").sum()),
            away_draws=("result", lambda x: (x == "Draw").sum()),
            away_losses=("result", lambda x: (x == "Home Win").sum()),
        )
        .reset_index()
    )

    home_team_performance.rename(columns={"HomeTeamName": "Team"}, inplace=True)
    away_team_performance.rename(columns={"AwayTeamName": "Team"}, inplace=True)

    team_performance = pd.merge(
        home_team_performance,
        away_team_performance,
        on="Team"
    )

    team_performance["total_matches_played"] = (
        team_performance["home_matches_played"]
        + team_performance["away_matches_played"]
    )

    team_performance["total_goals_scored"] = (
        team_performance["home_goals_scored"] + team_performance["away_goals_scored"]
    )

    team_performance["total_goals_conceded"] = (
        team_performance["home_goals_conceded"]
        + team_performance["away_goals_conceded"]
    )

    team_performance["total_wins"] = (
        team_performance["home_wins"] + team_performance["away_wins"]
    )

    team_performance["total_draws"] = (
        team_performance["home_draws"] + team_performance["away_draws"]
    )

    team_performance["total_losses"] = (
        team_performance["home_losses"] + team_performance["away_losses"]
    )

    team_performance["win_rate"] = (
        team_performance["total_wins"] / team_performance["total_matches_played"]
    )

    team_performance["avg_goals_scored"] = (
        team_performance["total_goals_scored"]
        / team_performance["total_matches_played"]
    )

    team_performance["avg_goals_conceded"] = (
        team_performance["total_goals_conceded"]
        / team_performance["total_matches_played"]
    )

    most_recent_year = filtered_data["Year"].max()
    recent_data = filtered_data[filtered_data["Year"] == most_recent_year]

    recent_home_performance = (
        recent_data.groupby("HomeTeamName")
        .agg(recent_home_wins=("result", lambda x: (x == "Home Win").sum()))
        .reset_index()
    )

    recent_away_performance = (
        recent_data.groupby("AwayTeamName")
        .agg(recent_away_wins=("result", lambda x: (x == "Away Win").sum()))
        .reset_index()
    )

    recent_home_performance.rename(columns={"HomeTeamName": "Team"}, inplace=True)
    recent_away_performance.rename(columns={"AwayTeamName": "Team"}, inplace=True)

    recent_performance = pd.merge(
        recent_home_performance,
        recent_away_performance,
        on="Team",
        suffixes=("_home", "_away"),
    )

    recent_performance["total_recent_wins"] = (
        recent_performance["recent_home_wins"] + recent_performance["recent_away_wins"]
    )

    full_performance = pd.merge(
        team_performance, recent_performance, on="Team", how="left"
    )

    full_performance["total_recent_wins"].fillna(0, inplace=True)

    full_performance["performance_score"] = (
        full_performance["win_rate"] * 0.6
        + full_performance["total_recent_wins"]
        / full_performance["total_matches_played"] * 0.4
        + full_performance["avg_goals_scored"] * 0.2
        - full_performance["avg_goals_conceded"] * 0.2
    )

    full_performance = full_performance.sort_values(
        by="performance_score", ascending=False
    )

    return full_performance

def predict_winner(performance):
    predicted_winner = performance.sort_values(
        by="performance_score", ascending=False
    ).iloc[0]["Team"]

    return predicted_winner

data = pd.read_csv(
    "https://raw.githubusercontent.com/menene/euro2024/main/uefa_euro_matches.csv",
    encoding="utf8",
)

data["HomeTeamName"] = data["HomeTeamName"].str.rstrip()
data["AwayTeamName"] = data["AwayTeamName"].str.lstrip()

teams = [
    "Albania",
    "Austria",
    "Belgium",
    "Croatia",
    "Czechia",
    "Denmark",
    "England",
    "France",
    "Georgia",
    "Germany",
    "Hungary",
    "Italy",
    "Netherlands",
    "Poland",
    "Portugal",
    "Romania",
    "Scotland",
    "Serbia",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Switzerland",
    "Türkiye",
    "Ukraine",
]

performance = calculate_performance(data, teams)

performance

predicted_winner = predict_winner(performance)

print("El ganador de la Euro 2024 será:", predicted_winner)